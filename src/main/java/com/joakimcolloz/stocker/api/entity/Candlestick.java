package com.joakimcolloz.stocker.api.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

/**
 * Represents a candlestick (OHLCV) data point for a stock symbol.
 * <p>
 * Maps to the {@code stock_prices_1day} table in the {@code stock_prices_schema} schema.
 * Each record contains open, high, low, close prices, volume, timestamp, and symbol.
 *
 * @author Joakim Colloz
 * @version 1.0
 */
@Entity
@Table(name = "stock_prices_1day", schema = "stock_prices_schema")
public class Candlestick {
    /**
     * Primary key â€” unique identifier for each candlestick record.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    /**
     * Opening price of the stock for the period.
     */
    @Column(name = "open")
    private double open;

    /**
     * Closing price of the stock for the period.
     */
    @Column(name = "close")
    private double close;

    /**
     * Lowest price of the stock during the period.
     */
    @Column(name = "low")
    private double low;

    /**
     * Highest price of the stock during the period.
     */
    @Column(name = "high")
    private double high;

    /**
     * Trading volume during the period.
     */
    @Column(name = "volume")
    private long volume;

    /**
     * Timestamp of the candlestick, represented as Unix epoch seconds.
     */
    @Column(name = "timestamp")
    private long timestamp;

    /**
     * Stock symbol (e.g., "BOL.ST", "ABB.ST").
     */
    @Column(name = "symbol")
    private String symbol;

    /**
     * Default constructor required by JPA.
     */
    public Candlestick() {
    }

    /**
     * Constructs a Candlestick with all data fields except the autogenerated ID.
     *
     * @param open opening price
     * @param close closing price
     * @param low lowest price
     * @param high highest price
     * @param volume trading volume
     * @param timestamp Unix epoch timestamp in seconds
     * @param symbol stock symbol
     */
    public Candlestick(double open, double close, double low, double high, long volume,
                       long timestamp, String symbol) {
        this.open = open;
        this.close = close;
        this.low = low;
        this.high = high;
        this.volume = volume;
        this.timestamp = timestamp;
        this.symbol = symbol;
    }

    // Getters and setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public double getOpen() {
        return open;
    }

    public void setOpen(double open) {
        this.open = open;
    }

    public double getClose() {
        return close;
    }

    public void setClose(double close) {
        this.close = close;
    }

    public double getLow() {
        return low;
    }

    public void setLow(double low) {
        this.low = low;
    }

    public double getHigh() {
        return high;
    }

    public void setHigh(double high) {
        this.high = high;
    }

    public long getVolume() {
        return volume;
    }

    public void setVolume(long volume) {
        this.volume = volume;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(long timestamp) {
        this.timestamp = timestamp;
    }

    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    /**
     * Returns the timestamp formatted as a human-readable date/time string
     * in the pattern {@code yyyy-MM-dd HH:mm:ss} using the system default timezone.
     *
     * @return formatted date/time string
     */
    public String getHumanReadableDate() {
        return DateTimeFormatter.ofPattern(
                "yyyy-MM-dd HH:mm:ss").format(
                Instant.ofEpochSecond(timestamp).atZone(ZoneId.systemDefault()));
    }

    @Override
    public String toString() {
        return "Candlestick{" +
                "id=" + id +
                ", Date=" + getHumanReadableDate() +
                ", open=" + open +
                ", close=" + close +
                ", low=" + low +
                ", high=" + high +
                ", volume=" + volume +
                ", timestamp=" + timestamp +
                ", symbol='" + symbol + '\'' +
                '}';
    }
}
